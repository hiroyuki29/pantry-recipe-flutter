import 'package:pantry_recipe_flutter/read_me/read_me.dart';

List<ReadMe> readMeListBase = [intro, exp1, exp2, exp3, exp4, exp5, exp6, pr1, pr2, pr3];

ReadMe intro =
    ReadMe(id: 1,
        leading: '概要',
        main:
            '本アプリをご使用していただき誠にありがとうございます。.\n'
            'このアプリは買ったものが自動でパントリーに保存される共有可能買い物メモアプリです.\n'
                '※実務未経験のエンジニア志望が作成したアプリになります. 使用技術等は本ページ下部に記載してあります.\n');

ReadMe exp1 = ReadMe(
    id: 2,
    leading: 'Step1：新規登録',
    main:
        'まずメールアドレスとパスワード（６文字以上）を入力し新規登録をしてください.\n'
            'お試しで使用する場合は\n'
            '    ・メールアドレス：test@example.com\n'
            '    ・パスワード：passwordtest\n'
            'でログインしてください.\n');

ReadMe exp2 = ReadMe(
    id: 3,
    leading: 'Step2：アイテムの登録',
    main:
    'メモを使用する前に メモに入力する可能性のある食材などを登録します.\n'
        'まずHome画面の「アイテム登録ボタン」から登録画面に移動します.\n'
        '画面左半分がメモに入力できる「登録済みのアイテム一覧」 右半分にアプリにデフォルトで用意している「ベース食材一覧」が表示されます.\n'
        'ベース食材一覧の中に登録したいアイテムがあれば その食材名が書いてあるカードをタップします.\n'
        'もし登録したいアイテムがベース食材一覧になければ 画面右下の「＋ボタン」をクリックし 登録したアイテム名および基準となる個数を入力し カテゴリーを選択します.\n');

ReadMe exp3 = ReadMe(
    id: 4,
    leading: 'Step3：メモの新規作成',
    main:
    'Home画面もしくは画面下部のナビゲーションバーにある「Memoボタン」からメモ作成画面に移動します.\n'
        '画面上部にメモの一覧 下部に新規作成もしくは検索用の入力フォームがあります.\n'
        'メモにはパスワードを設定し 他人と共有したい時はメモ名とパスワードを伝え、それを検索することで同じメモを共有することができるようになります.\n'
        '作成したメモカードの右側にある「＋ボタン」を押して 各メモにアイテムを追加します.\n'
        '画面左半分がメモに入力できる「メモ済みのアイテム」 右半分に先ほど登録した「登録アイテム一覧」が表示されます.\n'
        'メモに追加したいアイテムを登録アイテム一覧から選び タップすることで追加されます.\n'
        '個数を増やしたい場合は さらにタップすることで追加されます.\n');

ReadMe exp4 = ReadMe(
    id: 5,
    leading: 'Step4：メモにアイテムを追加',
    main:
        '作成したメモカードの右側にある「＋ボタン」を押して 各メモにアイテムを追加します.\n'
        '画面左半分がメモに入力できる「メモ済みのアイテム」 右半分に先ほど登録した「登録アイテム一覧」が表示されます.\n'
        'メモに追加したいアイテムを登録アイテム一覧から選び タップすることで追加されます.\n'
        '個数を増やしたい場合は さらにタップすることで追加されます.\n');

ReadMe exp5 = ReadMe(
    id: 6,
    leading: 'Step5：買い物をする',
    main:
    'メモ一覧画面に戻り 買い物に使用するメモをタップします.\n'
        'メモに追加したアイテムの一覧が表示されますので 買い物を完了したアイテムを都度タップします.\n'
        'タップされたアイテムはカード右側のボックスにチェックが入ります.\n'
        '全ての買い物が完了したら 画面下部の「買い物完了！ボタン」をタップします.\n'
        'チェックされていたアイテムのみメモから削除され 買い物が完了したアイテムはパントリーに移動します.\n');

ReadMe exp6 = ReadMe(
    id: 7,
    leading: 'Step6：パントリーを管理する',
    main:
    'Home画面もしくは画面下部のナビゲーションバーにある「Pantryボタン」からパントリー管理画面に移動します.\n'
        '先ほど買い物が完了したアイテムがパントリー一覧に追加されています.\n'
        '各カードの「編集ボタン」を押すことで個数を変更することができます.\n'
        'また画面右下の「＋ボタン」をタップすることでアイテムを追加することができます.\n');

ReadMe pr1 = ReadMe(
    id: 8,
    leading: '使用技術',
    main:
        'フロントエンド：Flutter web\n'
        '  （メイン）\n'
        '    ・Flutter 2.10.2\n'
        '    ・Dart 2.16.1\n'
        '  （主な使用パッケージ)\n'
        '    ・hooks_riverpod: 1.0.3\n'
        '    ・flutter_hooks: 0.18.2+1\n'
        '    ・http: 0.13.4\n'
        '    ・shared_preferences: 2.0.13\n'
        '    ・fluttertoast: 8.0.9\n'
        '\n'
        'バックエンド：Ruby on Rails [APIモード]\n'
        '  （メイン）\n'
        '    ・Ruby on Rails 5.2.6\n'
        '    ・Ruby 2.5.9\n'
        '  （主な使用パッケージ)\n'
        '    ・devise: 4.8.1\n'
        '    ・devise_token_auth: 1.2.0\n'
        '    ・rack-cors: 1.1.1\n');

ReadMe pr2 = ReadMe(
    id: 9,
    leading: '今後の改善予定',
    main:
    '・レシピ登録機能の追加\n'
        '      選択したレシピとパントリーを比較し 足りない食材を明示する機能を実装予知\n'
        '・表示速度の改善\n'
        '      現在はアイテムリスト等変更があるたびにデータベースとの通信を行っているが\n'
        '      これをshared-Preferencesを用いてローカルに一時保存するなどを行い\n'
        '      データベースとの通信量を削減することで表示速度改善を行う予定.\n'
        '・UI/UXの改善\n');

ReadMe pr3 = ReadMe(
    id: 10,
    leading: 'その他',
    main:
    '・Githubアカウント：hiroyuki29\n'
        '    （リポジトリ名）\n'
        '        ・フロントエンド：pantry-recipe-flutter\n'
        '        ・バックエンド：pantry-recipe\n');